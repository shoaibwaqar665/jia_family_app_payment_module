// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: webhook_events.sql

package pgstore

import (
	"encoding/json"
	"context"

)

const GetWebhookEventByEventID = `-- name: GetWebhookEventByEventID :one
SELECT id, event_id, event_type, payload, signature, processed, processed_at, created_at FROM webhook_events WHERE event_id = $1
`

func (q *Queries) GetWebhookEventByEventID(ctx context.Context, eventID string) (*WebhookEvent, error) {
	row := q.db.QueryRowContext(ctx, GetWebhookEventByEventID, eventID)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.EventType,
		&i.Payload,
		&i.Signature,
		&i.Processed,
		&i.ProcessedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const InsertWebhookEvent = `-- name: InsertWebhookEvent :one
INSERT INTO webhook_events (
    event_id, event_type, payload, signature
) VALUES (
    $1, $2, $3, $4
) RETURNING id, event_id, event_type, payload, signature, processed, processed_at, created_at
`

type InsertWebhookEventParams struct {
	EventID   string          `json:"event_id"`
	EventType string          `json:"event_type"`
	Payload   json.RawMessage `json:"payload"`
	Signature string          `json:"signature"`
}

func (q *Queries) InsertWebhookEvent(ctx context.Context, arg InsertWebhookEventParams) (*WebhookEvent, error) {
	row := q.db.QueryRowContext(ctx, InsertWebhookEvent,
		arg.EventID,
		arg.EventType,
		arg.Payload,
		arg.Signature,
	)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.EventType,
		&i.Payload,
		&i.Signature,
		&i.Processed,
		&i.ProcessedAt,
		&i.CreatedAt,
	)
	return &i, err
}

const ListUnprocessedWebhookEvents = `-- name: ListUnprocessedWebhookEvents :many
SELECT id, event_id, event_type, payload, signature, processed, processed_at, created_at FROM webhook_events 
WHERE processed = FALSE
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) ListUnprocessedWebhookEvents(ctx context.Context, limit int32) ([]*WebhookEvent, error) {
	rows, err := q.db.QueryContext(ctx, ListUnprocessedWebhookEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WebhookEvent{}
	for rows.Next() {
		var i WebhookEvent
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.EventType,
			&i.Payload,
			&i.Signature,
			&i.Processed,
			&i.ProcessedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkWebhookEventProcessed = `-- name: MarkWebhookEventProcessed :one
UPDATE webhook_events 
SET processed = TRUE, processed_at = NOW()
WHERE event_id = $1
RETURNING id, event_id, event_type, payload, signature, processed, processed_at, created_at
`

func (q *Queries) MarkWebhookEventProcessed(ctx context.Context, eventID string) (*WebhookEvent, error) {
	row := q.db.QueryRowContext(ctx, MarkWebhookEventProcessed, eventID)
	var i WebhookEvent
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.EventType,
		&i.Payload,
		&i.Signature,
		&i.Processed,
		&i.ProcessedAt,
		&i.CreatedAt,
	)
	return &i, err
}
