// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: payments.sql

package pgstore

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const CountPayments = `-- name: CountPayments :one
SELECT COUNT(*) FROM payments
`

func (q *Queries) CountPayments(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPayments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePayment = `-- name: CreatePayment :one
INSERT INTO payments (
    id, amount, currency, status, payment_method, customer_id, order_id,
    description, stripe_payment_intent_id, stripe_session_id, metadata
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7,
    $8, $9,
    $10, $11
) RETURNING id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at
`

type CreatePaymentParams struct {
	ID                    uuid.UUID             `json:"id"`
	Amount                int32                 `json:"amount"`
	Currency              string                `json:"currency"`
	Status                string                `json:"status"`
	PaymentMethod         string                `json:"payment_method"`
	CustomerID            string                `json:"customer_id"`
	OrderID               string                `json:"order_id"`
	Description           sql.NullString        `json:"description"`
	StripePaymentIntentID sql.NullString        `json:"stripe_payment_intent_id"`
	StripeSessionID       sql.NullString        `json:"stripe_session_id"`
	Metadata              pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, CreatePayment,
		arg.ID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.PaymentMethod,
		arg.CustomerID,
		arg.OrderID,
		arg.Description,
		arg.StripePaymentIntentID,
		arg.StripeSessionID,
		arg.Metadata,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.StripePaymentIntentID,
		&i.StripeSessionID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeletePayment, id)
	return err
}

const GetPaymentByID = `-- name: GetPaymentByID :one
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, id uuid.UUID) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, GetPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.StripePaymentIntentID,
		&i.StripeSessionID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at FROM payments WHERE order_id = $1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, orderID string) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, GetPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.StripePaymentIntentID,
		&i.StripeSessionID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetPaymentsByCustomerID = `-- name: GetPaymentsByCustomerID :many
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at FROM payments 
WHERE customer_id = $1
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type GetPaymentsByCustomerIDParams struct {
	CustomerID string `json:"customer_id"`
	Offset     int32  `json:"offset"`
	Limit      int32  `json:"limit"`
}

func (q *Queries) GetPaymentsByCustomerID(ctx context.Context, arg GetPaymentsByCustomerIDParams) ([]*Payment, error) {
	rows, err := q.db.QueryContext(ctx, GetPaymentsByCustomerID, arg.CustomerID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.PaymentMethod,
			&i.CustomerID,
			&i.OrderID,
			&i.Description,
			&i.StripePaymentIntentID,
			&i.StripeSessionID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPayments = `-- name: ListPayments :many
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at FROM payments 
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type ListPaymentsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]*Payment, error) {
	rows, err := q.db.QueryContext(ctx, ListPayments, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.PaymentMethod,
			&i.CustomerID,
			&i.OrderID,
			&i.Description,
			&i.StripePaymentIntentID,
			&i.StripeSessionID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePayment = `-- name: UpdatePayment :one
UPDATE payments 
SET 
    amount = $1,
    currency = $2,
    status = $3,
    payment_method = $4,
    description = $5,
    stripe_payment_intent_id = $6,
    stripe_session_id = $7,
    metadata = $8,
    updated_at = NOW()
WHERE id = $9
RETURNING id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at
`

type UpdatePaymentParams struct {
	Amount                int32                 `json:"amount"`
	Currency              string                `json:"currency"`
	Status                string                `json:"status"`
	PaymentMethod         string                `json:"payment_method"`
	Description           sql.NullString        `json:"description"`
	StripePaymentIntentID sql.NullString        `json:"stripe_payment_intent_id"`
	StripeSessionID       sql.NullString        `json:"stripe_session_id"`
	Metadata              pqtype.NullRawMessage `json:"metadata"`
	ID                    uuid.UUID             `json:"id"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, UpdatePayment,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.PaymentMethod,
		arg.Description,
		arg.StripePaymentIntentID,
		arg.StripeSessionID,
		arg.Metadata,
		arg.ID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.StripePaymentIntentID,
		&i.StripeSessionID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments 
SET status = $1, updated_at = NOW()
WHERE id = $2
RETURNING id, amount, currency, status, payment_method, customer_id, order_id, description, stripe_payment_intent_id, stripe_session_id, metadata, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (*Payment, error) {
	row := q.db.QueryRowContext(ctx, UpdatePaymentStatus, arg.Status, arg.ID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.StripePaymentIntentID,
		&i.StripeSessionID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
