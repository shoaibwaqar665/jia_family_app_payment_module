// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package pgstore

import (
	"encoding/json"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

// Stores user entitlements to features based on their plans
type Entitlement struct {
	ID             uuid.UUID      `json:"id"`
	UserID         string         `json:"user_id"`
	FamilyID       sql.NullString `json:"family_id"`
	FeatureCode    string         `json:"feature_code"`
	PlanID         string         `json:"plan_id"`
	SubscriptionID sql.NullString `json:"subscription_id"`
	Status         string         `json:"status"`
	GrantedAt      time.Time      `json:"granted_at"`
	// When the entitlement expires (NULL means never expires)
	ExpiresAt   sql.NullTime          `json:"expires_at"`
	UsageLimits pqtype.NullRawMessage `json:"usage_limits"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
	CreatedAt   time.Time             `json:"created_at"`
	UpdatedAt   time.Time             `json:"updated_at"`
}

// Transactional outbox for reliable event publishing
type Outbox struct {
	ID        uuid.UUID       `json:"id"`
	EventType string          `json:"event_type"`
	Payload   json.RawMessage `json:"payload"`
	// Status: pending, published, failed
	Status       string         `json:"status"`
	RetryCount   int32          `json:"retry_count"`
	CreatedAt    time.Time      `json:"created_at"`
	PublishedAt  sql.NullTime   `json:"published_at"`
	ErrorMessage sql.NullString `json:"error_message"`
}

// Stores payment transactions and their status
type Payment struct {
	ID uuid.UUID `json:"id"`
	// Amount in cents (e.g., 1000 = $10.00)
	Amount                int32                 `json:"amount"`
	Currency              string                `json:"currency"`
	Status                string                `json:"status"`
	PaymentMethod         string                `json:"payment_method"`
	CustomerID            string                `json:"customer_id"`
	OrderID               string                `json:"order_id"`
	Description           sql.NullString        `json:"description"`
	StripePaymentIntentID sql.NullString        `json:"stripe_payment_intent_id"`
	StripeSessionID       sql.NullString        `json:"stripe_session_id"`
	Metadata              pqtype.NullRawMessage `json:"metadata"`
	CreatedAt             time.Time             `json:"created_at"`
	UpdatedAt             time.Time             `json:"updated_at"`
}

// Updated with new Jia pricing structure - August 2025
type Plan struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	FeatureCodes []string       `json:"feature_codes"`
	BillingCycle sql.NullString `json:"billing_cycle"`
	// Price in cents (e.g., 999 = $9.99)
	PriceCents  int32                 `json:"price_cents"`
	Currency    string                `json:"currency"`
	MaxUsers    sql.NullInt32         `json:"max_users"`
	UsageLimits pqtype.NullRawMessage `json:"usage_limits"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
	Active      bool                  `json:"active"`
	CreatedAt   time.Time             `json:"created_at"`
	UpdatedAt   time.Time             `json:"updated_at"`
}

// Stores webhook events for idempotency and audit purposes
type WebhookEvent struct {
	ID        uuid.UUID       `json:"id"`
	EventID   string          `json:"event_id"`
	EventType string          `json:"event_type"`
	Payload   json.RawMessage `json:"payload"`
	Signature string          `json:"signature"`
	// Whether the webhook event has been processed
	Processed   bool         `json:"processed"`
	ProcessedAt sql.NullTime `json:"processed_at"`
	CreatedAt   time.Time    `json:"created_at"`
}
