// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: outbox.sql

package pgstore

import (
	"encoding/json"
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const GetOutboxEventByID = `-- name: GetOutboxEventByID :one
SELECT id, event_type, payload, status, retry_count, created_at, published_at, error_message FROM outbox WHERE id = $1
`

func (q *Queries) GetOutboxEventByID(ctx context.Context, id uuid.UUID) (*Outbox, error) {
	row := q.db.QueryRowContext(ctx, GetOutboxEventByID, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.Status,
		&i.RetryCount,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.ErrorMessage,
	)
	return &i, err
}

const GetPendingOutboxEvents = `-- name: GetPendingOutboxEvents :many
SELECT id, event_type, payload, status, retry_count, created_at, published_at, error_message FROM outbox 
WHERE status = 'pending'
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) GetPendingOutboxEvents(ctx context.Context, limit int32) ([]*Outbox, error) {
	rows, err := q.db.QueryContext(ctx, GetPendingOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Outbox{}
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Payload,
			&i.Status,
			&i.RetryCount,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertOutboxEvent = `-- name: InsertOutboxEvent :one
INSERT INTO outbox (
    event_type, payload
) VALUES (
    $1, $2
) RETURNING id, event_type, payload, status, retry_count, created_at, published_at, error_message
`

type InsertOutboxEventParams struct {
	EventType string          `json:"event_type"`
	Payload   json.RawMessage `json:"payload"`
}

func (q *Queries) InsertOutboxEvent(ctx context.Context, arg InsertOutboxEventParams) (*Outbox, error) {
	row := q.db.QueryRowContext(ctx, InsertOutboxEvent, arg.EventType, arg.Payload)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.Status,
		&i.RetryCount,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.ErrorMessage,
	)
	return &i, err
}

const ListFailedOutboxEvents = `-- name: ListFailedOutboxEvents :many
SELECT id, event_type, payload, status, retry_count, created_at, published_at, error_message FROM outbox 
WHERE status = 'failed' AND retry_count < 5
ORDER BY created_at ASC
LIMIT $1
`

func (q *Queries) ListFailedOutboxEvents(ctx context.Context, limit int32) ([]*Outbox, error) {
	rows, err := q.db.QueryContext(ctx, ListFailedOutboxEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Outbox{}
	for rows.Next() {
		var i Outbox
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Payload,
			&i.Status,
			&i.RetryCount,
			&i.CreatedAt,
			&i.PublishedAt,
			&i.ErrorMessage,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const MarkOutboxEventFailed = `-- name: MarkOutboxEventFailed :one
UPDATE outbox 
SET status = 'failed', error_message = $1, retry_count = retry_count + 1
WHERE id = $2
RETURNING id, event_type, payload, status, retry_count, created_at, published_at, error_message
`

type MarkOutboxEventFailedParams struct {
	ErrorMessage sql.NullString `json:"error_message"`
	ID           uuid.UUID      `json:"id"`
}

func (q *Queries) MarkOutboxEventFailed(ctx context.Context, arg MarkOutboxEventFailedParams) (*Outbox, error) {
	row := q.db.QueryRowContext(ctx, MarkOutboxEventFailed, arg.ErrorMessage, arg.ID)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.Status,
		&i.RetryCount,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.ErrorMessage,
	)
	return &i, err
}

const MarkOutboxEventPublished = `-- name: MarkOutboxEventPublished :one
UPDATE outbox 
SET status = 'published', published_at = NOW()
WHERE id = $1
RETURNING id, event_type, payload, status, retry_count, created_at, published_at, error_message
`

func (q *Queries) MarkOutboxEventPublished(ctx context.Context, id uuid.UUID) (*Outbox, error) {
	row := q.db.QueryRowContext(ctx, MarkOutboxEventPublished, id)
	var i Outbox
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Payload,
		&i.Status,
		&i.RetryCount,
		&i.CreatedAt,
		&i.PublishedAt,
		&i.ErrorMessage,
	)
	return &i, err
}
