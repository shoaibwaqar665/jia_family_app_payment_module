// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package pgstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CountPayments = `-- name: CountPayments :one
SELECT COUNT(*) FROM payments
`

func (q *Queries) CountPayments(ctx context.Context, db DBTX) (int64, error) {
	row := db.QueryRow(ctx, CountPayments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePayment = `-- name: CreatePayment :one
INSERT INTO payments (
    amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata
) VALUES (
    $1, $2, $3, $4,
    $5, $6, $7, $8,
    $9, $10
) RETURNING id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at
`

type CreatePaymentParams struct {
	Amount            int32       `json:"amount"`
	Currency          string      `json:"currency"`
	Status            string      `json:"status"`
	PaymentMethod     string      `json:"payment_method"`
	CustomerID        string      `json:"customer_id"`
	OrderID           string      `json:"order_id"`
	Description       pgtype.Text `json:"description"`
	ExternalPaymentID pgtype.Text `json:"external_payment_id"`
	FailureReason     pgtype.Text `json:"failure_reason"`
	Metadata          []byte      `json:"metadata"`
}

func (q *Queries) CreatePayment(ctx context.Context, db DBTX, arg CreatePaymentParams) (*Payment, error) {
	row := db.QueryRow(ctx, CreatePayment,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.PaymentMethod,
		arg.CustomerID,
		arg.OrderID,
		arg.Description,
		arg.ExternalPaymentID,
		arg.FailureReason,
		arg.Metadata,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.ExternalPaymentID,
		&i.FailureReason,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeletePayment = `-- name: DeletePayment :exec
DELETE FROM payments WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, db DBTX, id pgtype.UUID) error {
	_, err := db.Exec(ctx, DeletePayment, id)
	return err
}

const GetPaymentByID = `-- name: GetPaymentByID :one
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at FROM payments WHERE id = $1
`

func (q *Queries) GetPaymentByID(ctx context.Context, db DBTX, id pgtype.UUID) (*Payment, error) {
	row := db.QueryRow(ctx, GetPaymentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.ExternalPaymentID,
		&i.FailureReason,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetPaymentByOrderID = `-- name: GetPaymentByOrderID :one
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at FROM payments WHERE order_id = $1
`

func (q *Queries) GetPaymentByOrderID(ctx context.Context, db DBTX, orderID string) (*Payment, error) {
	row := db.QueryRow(ctx, GetPaymentByOrderID, orderID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.ExternalPaymentID,
		&i.FailureReason,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetPaymentsByCustomerID = `-- name: GetPaymentsByCustomerID :many
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at FROM payments 
WHERE customer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetPaymentsByCustomerID(ctx context.Context, db DBTX, customerID string) ([]*Payment, error) {
	rows, err := db.Query(ctx, GetPaymentsByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.PaymentMethod,
			&i.CustomerID,
			&i.OrderID,
			&i.Description,
			&i.ExternalPaymentID,
			&i.FailureReason,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPayments = `-- name: ListPayments :many
SELECT id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at FROM payments 
ORDER BY created_at DESC
`

func (q *Queries) ListPayments(ctx context.Context, db DBTX) ([]*Payment, error) {
	rows, err := db.Query(ctx, ListPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.PaymentMethod,
			&i.CustomerID,
			&i.OrderID,
			&i.Description,
			&i.ExternalPaymentID,
			&i.FailureReason,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePayment = `-- name: UpdatePayment :one
UPDATE payments 
SET amount = $1,
    currency = $2,
    status = $3,
    payment_method = $4,
    customer_id = $5,
    order_id = $6,
    description = $7,
    external_payment_id = $8,
    failure_reason = $9,
    metadata = $10,
    updated_at = NOW()
WHERE id = $11
RETURNING id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at
`

type UpdatePaymentParams struct {
	Amount            int32       `json:"amount"`
	Currency          string      `json:"currency"`
	Status            string      `json:"status"`
	PaymentMethod     string      `json:"payment_method"`
	CustomerID        string      `json:"customer_id"`
	OrderID           string      `json:"order_id"`
	Description       pgtype.Text `json:"description"`
	ExternalPaymentID pgtype.Text `json:"external_payment_id"`
	FailureReason     pgtype.Text `json:"failure_reason"`
	Metadata          []byte      `json:"metadata"`
	ID                pgtype.UUID `json:"id"`
}

func (q *Queries) UpdatePayment(ctx context.Context, db DBTX, arg UpdatePaymentParams) (*Payment, error) {
	row := db.QueryRow(ctx, UpdatePayment,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.PaymentMethod,
		arg.CustomerID,
		arg.OrderID,
		arg.Description,
		arg.ExternalPaymentID,
		arg.FailureReason,
		arg.Metadata,
		arg.ID,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.ExternalPaymentID,
		&i.FailureReason,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const UpdatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments 
SET status = $1,
    failure_reason = $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, amount, currency, status, payment_method, customer_id, order_id, description, external_payment_id, failure_reason, metadata, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	Status        string      `json:"status"`
	FailureReason pgtype.Text `json:"failure_reason"`
	ID            pgtype.UUID `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, db DBTX, arg UpdatePaymentStatusParams) (*Payment, error) {
	row := db.QueryRow(ctx, UpdatePaymentStatus, arg.Status, arg.FailureReason, arg.ID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentMethod,
		&i.CustomerID,
		&i.OrderID,
		&i.Description,
		&i.ExternalPaymentID,
		&i.FailureReason,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
